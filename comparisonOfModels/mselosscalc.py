# -*- coding: utf-8 -*-
"""MSELossCalc.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VvF_8WmeZTb-T4m2mhwZMH-kK99TYHId
"""

import tensorflow
print(tensorflow.__version__)

!pip install tensorflow==1.14.0

# Commented out IPython magic to ensure Python compatibility.
!git clone https://github.com/ildoonet/tf-pose-estimation.git > /dev/null
# %cd /content/tf-pose-estimation
!pip -q install -r requirements.txt
!python setup.py install

!wget https://www.dropbox.com/s/nf7ffqjv37dvin0/graph_opt.pb?dl=0 -O ./tf-pose-estimation/models/graph/cmu/graph_opt.pb

# Commented out IPython magic to ensure Python compatibility.
!sudo apt install swig
# %cd tf_pose/pafprocess
!swig -python -c++ pafprocess.i && python3 setup.py build_ext --inplace
# %cd /content/tf-pose-estimation

from google.colab import drive
drive.mount('/content/drive')

import glob

input_path = "/content/drive/MyDrive/DL_Data/PG2_GAN/GFLA/fashion_900/"

L = glob.glob(input_path+"*.jpg")
op = []
import os
!python /content/tf-pose-estimation/run.py --model=mobilenet_thin --image=/content/drive/MyDrive/DL_Data/PG2_GAN/GFLA/fashion_900/

#calculate mse from csv files
from google.colab import drive
drive.mount('/content/drive',force_remount=True)

import pandas as pd
data = pd.read_csv("/content/drive/MyDrive/DL_Data/PG2_GAN/GFLA/doc4.csv") 
data.head(1)

# import pandas as pd
from sklearn import preprocessing


newData = data.drop('name', axis=1)
x = newData.values #returns a numpy array
min_max_scaler = preprocessing.MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(x)
data = pd.DataFrame(x_scaled)

data['combined']= data.loc[:, data.columns != 'name'].values.tolist()
l = []
# pd.dataFrame.dropna

for i in data['combined']:

  l.append(i)

for i in l:
  for j in i:
    if str(j) == 'nan':
      i.remove(j)

print(len(l),len(l[0]))

# print(l[-1])
m = []
for i in l:
  k = []
  m.append([i[:36],i[36:]])
print(len(m[0]))

x=[]
for i in m:
  x.append([(a_i - b_i)**2 for a_i, b_i in zip(i[0], i[1])])
y = []
for i in x:
  y.append(sum(i)/36)
print(len(y),y)

mseloss_gfla = sum(y)/len(y)
print(mseloss_gfla)